[build-system]
build-backend = "poetry.masonry.api"
requires = ["poetry>=1.0.0"]

[tool.black]
line-length = 119

[tool.coverage.report]
exclude_lines = [
    "if sys.version_info.*",
    "pragma: no cover",
    "raise NotImplementedError",
]
fail_under = 20
show_missing = true

[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = []
source = ["atoolbox"]

[tool.poetry]
authors = ["Andreas Hofer <andreas.hofer@amitronics.de>"]
description = "A toolbox for daily business."
documentation = "https://amitronics.gitlab.io/atoolbox"
homepage = "https://gitlab.com/amitronics/atoolbox"
keywords = []
license = "MIT"
name = "atoolbox"
readme = "README.md"
version = "0.6.0"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
pandas = "^1.2.2"
openpyxl = "^3.0.7"
scipy = "^1.7.1"
SoundFile = "^0.10.3"
Pillow = "^8.4.0"
PyYAML = "^6.0"

[tool.poetry.dev-dependencies]
bandit = "^1.7.0"
black = "^20.8b1"
coverage = { version = "^5.3.1", extras = ["toml"] }
mccabe = "^0.6.1"
mkdocs = "^1.1.2"
mkdocs-material = "^6.2.2"
mkdocstrings = "^0.13.6"
mypy = "^0.790"
pymdown-extensions = "^8.0.1"
pytest = "^6.2.1"
pytest-cov = "^2.10.1"
pytest-mock = "^3.4.0"
toml = "^0.10.2"
tox = "^3.20.1"
pyflakes = "^2.2.0"
pep8-naming = "^0.11.1"
pycodestyle = "^2.6.0"
mknotebooks = "^0.6.2"
pre-commit = "^2.10.1"
ipython = "^7.21.0"
pylint = "^2.8.2"
bump2version = "^1.0.1"
jupyter = "^1.0.0"
snakeviz = "^2.1.0"
pandasgui = "^0.2.13"

[tool.pytest.ini_options]
addopts = "-sv"
markers = [
    "functional: mark as functional test.",
    "integration: mark as integration test.",
    "unit: mark as unit test.",
]
python_classes = "Test*"
python_files = [
    "__init__.py",
    "test_*.py",
]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint]
    [tool.pylint.master]
    jobs = 0
    load-plugins = [
        'pylint.extensions.broad_try_clause',
        'pylint.extensions.emptystring',
        'pylint.extensions.comparetozero',
        'pylint.extensions.bad_builtin',
        'pylint.extensions.mccabe',
        'pylint.extensions.docstyle',
        'pylint.extensions.check_elif',
        'pylint.extensions.redefined_variable_type',
        'pylint.extensions.overlapping_exceptions',
        'pylint.extensions.docparams',
    ]
    max-line-length = 119
    persistent = 'no'
    extension-pkg-whitelist=["pyodbc"]

    [tool.pylint.messages_control]
    enable = [
        'F',  # Fatal
        'E',  # Error
        'W',  # Warning
        'R',  # Refactor
        'C',  # Convention
        'I',  # Informational
    ]
    disable= [
        'fixme',
        'bad-continuation',  # TODO: this check is removed in pylint 2.6
        'no-absolute-import',
        'spelling',
        'suppressed-message',
        'locally-disabled',
        'invalid-name',
        'input-builtin',
        'too-few-public-methods',
        'too-many-instance-attributes',
        'too-many-arguments',
    ]

    [tool.pylint.reports]
    msg-template = '{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}'
    output-format = 'colorized'
    score = 'no'

    [tool.pylint.format]
    single-line-if-stmt = 'yes'

    [tool.pylic]
    safe_licenses = [
        "Apache Software License",
        "Apache License 2.0",
        "MIT License",
        "Python Software Foundation License",
        "Mozilla Public License 2.0 (MPL 2.0)",
        "Public Domain",
        "BSD License", # der Copyright-Vermerk des ursprünglichen Programms darf nicht entfernt werden
        "BSD 3-Clause", # verbietet, für abgeleitete Werke mit dem Namen der Lizenz oder ihrer Autoren zu werben.
    ]
    unsafe_packages = [
        "unlicensedPackage",
    ]
