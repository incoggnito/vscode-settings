[build-system]
build-backend = "poetry.masonry.api"
requires = ["poetry>=1.0.0"]

[tool.poetry]
authors = ["Karl Benkler <karl.benkler@amitronics.de>"]
description = "Vibroacoustic Signal Processing Toolkit for PythonCoustic Singal"
documentation = "https://amitronics.gitlab.io/vaspy"
homepage = "https://git.amitronics.net/amitronics/tools/vaspy"
keywords = ["plot", "acoustic", "signalanalysis", "graph"]
license = "MIT"
name = "vaspy"
readme = "README.md"
version = "0.2.8"

[tool.poetry.dependencies]
python = ">3.7, <3.11"
seaborn = "^0.11"
matplotlib="^3.3"
PyWavelets = "^1.1.1"
pyqtgraph = "^0.12.1"
numpy = ">=1.18,<1.22"
numba = "^0.55.1"
vallenae = "^0.6.0"
sounddevice = "^0.4.4"

[tool.poetry.extras]
spyder = ["spyder"]

[tool.poetry.dev-dependencies]
black = "^20.8b1"
pylint = "^2.8.0"
mypy = "^0.790"
pytest = "^6.2.1"
pre-commit = "^2.10.1"
ipython = "^7.23.0"
bump2version = "^1.0.1"
jupyter = "^1.0.0"
pylic = "^2.2.0"


[tool.pytest.ini_options]
addopts = "-sv"
markers = [
    "functional: mark as functional test.",
    "integration: mark as integration test.",
    "unit: mark as unit test.",
]
python_classes = "Test*"
python_files = [
    "__init__.py",
    "test_*.py",
]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.black]
line-length = 119
target_version = ['py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
  )/
)
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint]
    [tool.pylint.master]
    jobs = 0
    load-plugins = [
        'pylint.extensions.broad_try_clause',
        'pylint.extensions.emptystring',
        'pylint.extensions.comparetozero',
        'pylint.extensions.bad_builtin',
        'pylint.extensions.mccabe',
        'pylint.extensions.docstyle',
        'pylint.extensions.check_elif',
        'pylint.extensions.redefined_variable_type',
        'pylint.extensions.overlapping_exceptions',
        'pylint.extensions.docparams',
    ]
    max-line-length = 119
    persistent = 'no'

    [tool.pylint.messages_control]
    enable = [
        'F',  # Fatal
        'E',  # Error
        'W',  # Warning
        'R',  # Refactor
        'C',  # Convention
        'I',  # Informational
    ]
    disable= [
        'fixme',
        'bad-continuation',  # TODO: this check is removed in pylint 2.6
        'no-absolute-import',
        'spelling',
        'suppressed-message',
        'locally-disabled',
    ]

    [tool.pylint.reports]
    msg-template = '{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}'
    output-format = 'colorized'
    score = 'no'

    [tool.pylint.format]
    single-line-if-stmt = 'yes'

[tool.pylic]
safe_licenses = [
    "Apache Software License",
    "Apache License 2.0",
    "MIT License",
    "Python Software Foundation License",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "Public Domain",
    "BSD License", # der Copyright-Vermerk des ursprünglichen Programms darf nicht entfernt werden
    "BSD 3-Clause", # verbietet, für abgeleitete Werke mit dem Namen der Lizenz oder ihrer Autoren zu werben.
]
unsafe_packages = [
    "unlicensedPackage",
]
